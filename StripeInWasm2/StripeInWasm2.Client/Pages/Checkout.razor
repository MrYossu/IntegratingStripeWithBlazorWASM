@page "/checkout"
@using StripeInWasm2.Client.Models
@using StripeInWasm2.Client.Services
@using StripeInWasm2.Common.Models
@implements IAsyncDisposable
@inject StripeService StripeService
@inject IJSRuntime JsRuntime

<div class="container">
  <h1>Checkout</h1>

  <div class="row">
    <div class="col-md-6">
      <div class="card">
        <div class="card-body">
          <h5 class="card-title">Order Summary</h5>
          <p class="card-text">Total: &pound;@Amount.ToString("0.00")</p>

          <EditForm Model="@this" OnSubmit="@ProcessPayment">
            <div class="mb-3">
              <label for="amount" class="form-label">Amount (&pound;)</label>
              <InputNumber id="amount" class="form-control" @bind-Value="Amount" />
            </div>

            <div class="mb-3">
              <label for="card-element" class="form-label">Card Details</label>
              <div id="card-element" class="form-control">
                <!-- Stripe Card Element will be mounted here -->
              </div>
              <div id="card-errors" class="text-danger mt-2"></div>
            </div>

            <div class="alert alert-danger @(string.IsNullOrEmpty(ErrorMessage) ? "d-none" : "")">
              @ErrorMessage
            </div>

            <div class="alert alert-success @(!IsPaymentSuccessful ? "d-none" : "")">
              Payment ID: @PaymentIntentId
            </div>

            <button type="submit" class="btn btn-primary" id="payment-button" disabled="@IsProcessing">
              @(IsProcessing ? "Processing..." : "Pay Now")
            </button>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
</div>

<Overlay Visible="@_show3dModal" ShowCloseButton="false">
  <div style="width: 100%; height: 100%;">
    <iframe src="@_3dUrl" width="600px" height="600px"></iframe>
  </div>
</Overlay>

@code {
  private decimal Amount { get; set; } = 12.34M;
  private bool IsProcessing { get; set; }
  private bool IsPaymentSuccessful { get; set; }
  private string ErrorMessage { get; set; } = "";
  private string PaymentIntentId { get; set; } = "";
  private IJSObjectReference? _jsModule;
  private DotNetObjectReference<Checkout>? _objectReference = null!;
  private bool _show3dModal;
  private string _3dUrl = "";

  protected override void OnInitialized() =>
    _objectReference = DotNetObjectReference.Create(this);

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    if (firstRender) {
      try {
        _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/stripeHelper.js");
        await _jsModule.InvokeVoidAsync("setupMessageListener", _objectReference);
        await StripeService.InitializeStripe();
      }
      catch (Exception ex) {
        ErrorMessage = $"Error initializing payment: {ex.Message}";
        StateHasChanged();
      }
    }
  }

  private async Task ProcessPayment() {
    try {
      IsProcessing = true;
      IsPaymentSuccessful = false;
      ErrorMessage = "";
      StateHasChanged();
      PaymentResult createPaymentMethodResult = await _jsModule!.InvokeAsync<PaymentResult>("createPaymentMethod");
      if (createPaymentMethodResult.Status == PaymentResultStatuses.Error) {
        ErrorMessage = $"Error creating payment method: {createPaymentMethodResult.Message}";
        return;
      }
      PaymentResult result = await StripeService.SubmitPayment(createPaymentMethodResult.PaymentMethodId, (long)(Amount * 100));
      switch (result.Status) {
        case PaymentResultStatuses.Success:
          IsPaymentSuccessful = true;
          PaymentIntentId = result.PaymentMethodId;
          break;
        case PaymentResultStatuses.Declined:
          ErrorMessage = result.Message;
          break;
        case PaymentResultStatuses.Redirect:
          _3dUrl = result.Message;
          _show3dModal = true;
          break;
        case PaymentResultStatuses.Error:
          ErrorMessage = result.Message;
          break;
      }
    }
    catch (Exception ex) {
      ErrorMessage = $"Error processing payment: {ex.Message}";
    }
    finally {
      IsProcessing = false;
      StateHasChanged();
    }
  }

  [JSInvokable]
  public async Task HandlePost3DMessage(string message) {
    if (message.StartsWith("payment_intent_client_secret:")) {
      string secret = message.Substring(message.IndexOf(":") + 1);
      PaymentIntentDto paymentIntent = await _jsModule!.InvokeAsync<PaymentIntentDto>("retrievePaymentIntent", secret);
      Console.WriteLine($"Checkout - Got PI. Status: {paymentIntent.Status}, Id: {paymentIntent.Id}");
      PaymentIntentId = paymentIntent.Id;
      IsPaymentSuccessful = true;
      _show3dModal = false;
    } else {
      Console.WriteLine($"Checkout - unknown message: {message}");
      ErrorMessage = $"Unknown error message: {message}";
      _show3dModal = false;
    }
    await InvokeAsync(StateHasChanged);
  }

  public async ValueTask DisposeAsync() {
    if (_jsModule is not null) {
      await _jsModule.InvokeVoidAsync("cleanup");
      await _jsModule.DisposeAsync();
    }
    if (_objectReference is not null) {
      _objectReference.Dispose();
    }
  }

}